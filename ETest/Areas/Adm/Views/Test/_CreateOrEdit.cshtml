@model Test
<span class="field-validation-valid text-danger col-md-offset-2" style="display: block; padding-left: 5px;" id="Validation"></span>
@Html.HiddenFor(s=>s.TestId)
<div class="form-group">
    @(Html.LabelFor(model => model.TestTitle, new { @class = "control-label col-md-2" }))
    <div class="col-md-10">
        @(Html.EditorFor(model => model.TestTitle, new
    {
        htmlAttributes = new
        {
            @class = "form-control description"
        }
    }))
        @(Html.ValidationMessageFor(model => model.TestTitle, "", new { @class = "text-danger", id= "TestTitleError" }))
    </div>
</div>

<div class="form-group">
    @(Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" }))
    <div class="col-md-10">
        @(Html.EditorFor(model => model.Description, new
          {
              htmlAttributes = new
              {
                  @class = "form-control description",
                  rows = 3
              }
          }))
        @(Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger", id = "TestDescriptionError" }))
    </div>
</div>

<div class="form-group">
    @(Html.LabelFor(model => model.CourseId, "Khóa học", new {@class = "control-label col-md-2"}))
    <div class="col-md-10">
        @Html.HiddenFor(model=>model.CourseId)
        @(Html.EditorFor(model => model.Course.CourseName, new { htmlAttributes = new { @class = "form-control", disabled = true } }))
    </div>  
</div>

<div class="hr-line-dashed"></div>
@{ Html.EnableClientValidation(false); }
<div class="form-group">
    @Html.LabelFor(m => m.TestStart, new {@class = "col-md-2 control-label"})
    <div class="col-md-10">
        <div class='input-group date'>
            @Html.TextBoxFor(m => m.TestStart, "{0:dd/MM/yyyy HH:mm}", new {@class = "form-control datetime"})
            @* ReSharper disable once Html.IdNotResolved *@
            <label class="input-group-addon" for="TestStart">
                <span class="glyphicon glyphicon-calendar"></span>
            </label>
        </div>
        @(Html.ValidationMessageFor(model => model.TestStart, "", new {@class = "text-danger"}))
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(m => m.TestEnd, new { @class = "col-md-2 control-label" })
    <div class="col-md-10">
        <div class='input-group date'>
            @Html.TextBoxFor(m => m.TestEnd, "{0:dd/MM/yyyy HH:mm}", new { @class = "form-control datetime" })
            @* ReSharper disable once Html.IdNotResolved *@
            <label class="input-group-addon" for="TestEnd">
                <span class="glyphicon glyphicon-calendar"></span>
            </label>
        </div>
        @(Html.ValidationMessageFor(model => model.TestStart, "", new { @class = "text-danger" }))
    </div>
</div>
@{ Html.EnableClientValidation(true); }
<div class="form-group">
    @Html.LabelFor(m => m.TestTime, new {@class = "col-md-2 control-label"})
    <div class="col-md-10">
        @Html.TextBoxFor(m => m.TestTime, new {@class = "form-control", type = "number", min = 0})
        @(Html.ValidationMessageFor(model => model.TestTime, "", new {@class = "text-danger", id = "TestTimeError" }))
    </div>
</div>

<div class="form-group">
    @(Html.LabelFor(model => model.MixedQuestions, new { @class = "control-label col-md-2" }))
    <div class="col-md-10">
        <div class="checkbox i-checks">
            @(Html.EditorFor(model => model.MixedQuestions, new { htmlAttributes = new { @class = "form-control" } }))
            @(Html.ValidationMessageFor(model => model.MixedQuestions, "", new { @class = "text-danger" }))
        </div>
    </div>
</div>
<div class="hr-line-dashed"></div>
<div class="form-group">
    @(Html.LabelFor(model => model.SubmitNo, new { @class = "control-label col-md-2" }))
    <div class="col-md-10">
            @(Html.EditorFor(model => model.SubmitNo, new { htmlAttributes = new { @class = "form-control", min = 0 } }))
            @(Html.ValidationMessageFor(model => model.SubmitNo, "", new { @class = "text-danger", id= "SubmitNoError" }))
    </div>
</div>

<div class="form-group">
    @(Html.LabelFor(model => model.GradeType, "Tính điểm", new { @class = "control-label col-md-2" }))
    <div class="col-md-10">
        @(Html.DropDownList("GradeType", null, "*** Chọn cách tính điểm ***", new { @class = "form-control" }))
        @(Html.ValidationMessageFor(model => model.GradeType, "", new { @class = "text-danger", id= "GradeTypeError" }))
    </div>
</div>

<div class="hr-line-dashed"></div>
<div class="form-group">
    @(Html.LabelFor(model => model.Actived, new { @class = "control-label col-md-2" }))
    <div class="col-md-10">
        <div class="checkbox i-checks">
            @(Html.EditorFor(model => model.Actived, new { htmlAttributes = new { @class = "form-control" } }))
            @(Html.ValidationMessageFor(model => model.Actived, "", new { @class = "text-danger" }))
        </div>
    </div>
</div>